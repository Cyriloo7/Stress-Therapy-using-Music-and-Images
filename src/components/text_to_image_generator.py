import os
from src.logger.logger import logger
import sys
from src.exceptions.exception import customexception
from src.components.text_summarization import TextSummarizer
from botocore.exceptions import ClientError
from transformers import pipeline
from PIL import Image
import requests
import torch
import io
import mlflow
import time
import base64
import boto3
import json


class ImageError(Exception):
    "Custom exception for errors returned by Amazon Titan Image Generator G1"

    def __init__(self, message):
        self.message = message


class TextToImage:
    def __init__(self):
        logger.info("Initializing TextToImage component")
        self.summarizer = TextSummarizer()
        self.emotion_pipeline = pipeline(
            "image-classification", model="dima806/facial_emotions_image_detection"
        )
        self.nsfw_pipeline = pipeline(
            "image-classification",
            model="giacomoarienti/nsfw-classifier",
            device="cuda" if torch.cuda.is_available() else "cpu",
        )

        torch.cuda.empty_cache()
        self.device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
        self.client = boto3.client("bedrock-runtime", region_name="us-west-2")

    def generate_image(self, model_id, body):
        """
        Generate an image using Amazon Titan Image Generator G1 model on demand.
        Args:
            model_id (str): The model ID to use.
            body (str) : The request body to use.
        Returns:
            image_bytes (bytes): The image generated by the model.
        """

        logger.info(
            "Generating image with Amazon Titan Image Generator G1 model %s", model_id
        )

        bedrock = boto3.client(service_name="bedrock-runtime")

        accept = "application/json"
        content_type = "application/json"

        response = bedrock.invoke_model(
            body=body, modelId=model_id, accept=accept, contentType=content_type
        )
        response_body = json.loads(response.get("body").read())

        base64_image = response_body.get("images")[0]
        base64_bytes = base64_image.encode("ascii")
        image_bytes = base64.b64decode(base64_bytes)

        finish_reason = response_body.get("error")

        if finish_reason is not None:
            raise ImageError(f"Image generation error. Error is {finish_reason}")

        logger.info(
            "Successfully generated image with Amazon Titan Image Generator G1 model %s",
            model_id,
        )

        return image_bytes

    def text_to_image(self, lt):
        """
        This function generates images based on the input text using the Amazon Titan Image Generator G1 model.
        It handles errors, retries, and filters out NSFW and unwanted images.

        Parameters:
        lt (list): A list of strings representing the input text for generating images.

        Returns:
        str: The directory name where the generated images are saved.

        Raises:
        customexception: If an exception occurs during the image generation process.
        """

        model_id = "amazon.titan-image-generator-v1"
        try:
            directory_name = (
                f"artifacts/Generated_image/Generated_image_{int(time.time())}"
            )
            os.makedirs(directory_name)
            print(f"Images will be saved in directory: {directory_name}")
            logger.info(f"Images will be saved in directory: {directory_name}")

            for i, inp in enumerate(lt):
                j = 0
                while j < 6:
                    logger.info(f"input : {inp}")
                    logger.info("Image generation API call initiated")
                    time.sleep(1)
                    body = json.dumps(
                        {
                            "taskType": "TEXT_IMAGE",
                            "textToImageParams": {"text": inp},
                            "imageGenerationConfig": {
                                "numberOfImages": 1,
                                "height": 1024,
                                "width": 1024,
                                "cfgScale": 8.0,
                                "seed": 0,
                            },
                        }
                    )

                    try:
                        image_bytes = self.generate_image(model_id=model_id, body=body)
                        image = Image.open(io.BytesIO(image_bytes))

                        if image:
                            with torch.no_grad():
                                torch.cuda.empty_cache()
                                results = self.nsfw_pipeline(image)
                                predicted_label = results[0]["label"]
                                logger.info(
                                    f"Generated image {i + 1} is {predicted_label} image."
                                )
                                print(predicted_label)

                            if predicted_label in ["neutral", "drawings"]:
                                emotion_results = self.emotion_pipeline(image)
                                emotion_predicted_label = emotion_results[0]["label"]

                                if emotion_predicted_label in [
                                    "happy",
                                    "neutral",
                                    "surprise",
                                ]:
                                    desired_width = 1024
                                    desired_height = 900
                                    image = image.resize(
                                        (desired_width, desired_height), Image.LANCZOS
                                    )
                                    logger.info("Image is resized")
                                    logger.info("Image is saved....................")
                                    image.save(
                                        f"{directory_name}/Generated_image_{i}.jpg",
                                        "JPEG",
                                    )
                                    break
                                else:
                                    logger.info(
                                        f"Generated image {i + 1} is {emotion_predicted_label} image. Retrying..."
                                    )
                                    print(
                                        f"Generated image {i + 1} is {emotion_predicted_label} image. Retrying..."
                                    )
                                    inp = self.summarizer.third_summarize(
                                        "happy scenery image of, " + inp
                                    )
                                    print(inp)
                            else:
                                logger.info(
                                    f"Generated image {i + 1} is {predicted_label} image. Retrying..."
                                )
                                print(
                                    f"Generated image {i + 1} is {predicted_label} image. Retrying..."
                                )
                                inp = self.summarizer.third_summarize(
                                    "scenery image of, " + inp
                                )
                                print(inp)

                        torch.cuda.empty_cache()
                        logger.info(f"{i} Image generation API call completed")

                    except (ClientError, ImageError) as err:
                        if isinstance(err, ClientError):
                            message = err.response["Error"]["Message"]
                        else:
                            message = err.message
                        logger.error(f"An error occurred: {message}")
                        print(f"An error occurred: {message}")
                        inp = self.summarizer.third_summarize(
                            "a beautiful scenery image of: " + inp
                        )
                        print(inp)

                    j += 1

                if j == 6:
                    logger.error(f"Failed to generate image {i + 1} after 6 retries.")
                    print(f"Failed to generate image {i + 1} after 6 retries.")

            return directory_name

        except Exception as e:
            logger.error(f"An exception occurred: {str(e)}")
            raise customexception(e, sys)


"""
if __name__ == "__main__":
    obj = TextToImage()
    input_txt = ["The song is about a relationship that has ended and the singer expresses feelings of sadness and regret over the loss of the relationship.", "a human walking in a street", "a tiger", "an elephant"]
    obj.text_to_image(input_txt)


    self.negative_prompts = ["pornography", "bed", "cot", "mattress", "sleep", "pillow", "bondage", "breast", "sofa", "cleavage", "sexy", "seductive", "ass", "porn", "(((deformed)))", "blurry", "bad anatomy",
                                        "disfigured", "poorly drawn face", "mutation", "mutated", "(extra_limb)", "(ugly)", "censored", "censor_bar", "multiple breasts", "(mutated hands and fingers:1.5)",
                                        "(long body :1.3)", "(mutation, poorly drawn :1.2)", "black-white", "bad anatomy", "liquid body", "liquid tongue", "disfigured", "malformed", "mutated", "anatomical nonsense",
                                        "text font ui", "error", "malformed hands", "long neck", "blurred", "lowers", "low res", "bad proportions", "bad shadow", "uncoordinated body", "unnatural body", "fused breasts",
                                        "bad breasts", "huge breasts", "poorly drawn breasts", "extra breasts", "liquid breasts", "heavy breasts", "missing breasts", "huge haunch", "huge thighs", "huge calf", "bad hands",
                                        "fused hand", "missing hand", "disappearing arms", "disappearing thigh", "disappearing calf", "disappearing legs", "fused ears", "bad ears", "poorly drawn ears",
                                        "extra ears", "liquid ears", "heavy ears", "missing ears", "old photo", "black and white filter", "colorless", "(((deformed)))", "blurry", "bad anatomy",
                                        "disfigured", "poorly drawn face", "mutation", "mutated", "(extra_limb)", "(ugly)", "(poorly drawn hands)", "fused fingers", "messy drawing", "broken legs", "censor",
                                        "censored", "censor_bar", "multiple breasts", "(mutated hands and fingers:1.5)", "(long body :1.3)", "(mutation, poorly drawn :1.2)", "black-white", "bad anatomy",
                                        "liquid body", "liquid tongue", "disfigured", "malformed", "mutated", "anatomical nonsense", "text font ui", "error", "malformed hands", "long neck", "blurred", "lowers", "low res",
                                        "bad proportions", "bad shadow", "uncoordinated body", "unnatural body", "fused breasts", "bad breasts", "huge breasts", "poorly drawn breasts", "extra breasts", "liquid breasts",
                                        "heavy breasts", "missing breasts", "huge haunch", "huge thighs", "huge calf", "bad hands", "fused hand", "missing hand", "disappearing arms", "disappearing thigh",
                                        "disappearing calf", "disappearing legs", "fused ears", "bad ears", "poorly drawn ears", "extra ears", "liquid ears", "heavy ears", "missing ears", "NSFW", "Naked", "Nude"]
                """
